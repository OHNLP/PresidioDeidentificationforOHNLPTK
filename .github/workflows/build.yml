name: Build
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
jobs:
  build-envs:
    name: Build Conda Environments
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out Repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11
      - name: Create and Package Conda Environment (Darwin/Linux)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        shell: bash
        run: |
          $CONDA/bin/conda config --set channel_priority strict
          $CONDA/bin/conda env update --file environment.yml --name base
          $CONDA/python -m spacy.download en_core_web_lg
          $CONDA/bin/conda-pack --ignore-missing-files -o env-${{ matrix.os }}.tar.gz
      - name: Create and Package Conda Environment (Windows)
        if: runner.os == 'Windows'
        run: |
          C:\Miniconda\condabin\conda.bat config --set channel_priority strict
          C:\Miniconda\condabin\conda.bat init powershell
          C:\Miniconda\condabin\conda.bat env update --file environment.yml --name base
          C:\Miniconda\python.exe -m spacy.download en_core_web_lg
          C:\Miniconda\Scripts\conda-pack.exe -p C:\Miniconda --ignore-missing-files -o env-${{ matrix.os }}.tar.gz
      - name: Upload environment archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-env
          path: env-${{ matrix.os }}.tar.gz
  build-dist:
    name: Build Module Archive
    needs: build-envs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download windows env file
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-env
      - name: Download ubuntu env file
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-env
      - name: Rename environments
        shell: bash
        run: |
          mv env-windows-latest.tar.gz env-win32.tar.gz
          mv env-ubuntu-latest.tar.gz env-linux.tar.gz
      - name: Zip Package Sources and Env (Online/Compact)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r PresidioDeidentificationForOHNLPTK.zip environment.yml LICENSE NOTICE presidio_deid.py README.md backbone_module.json
      - name: Zip Package Sources and Env (Standalone)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r PresidioDeidentificationForOHNLPTK-Standalone.zip environment.yml LICENSE NOTICE presidio_deid.py README.md backbone_module.json env-win32.tar.gz env-linux.tar.gz
      - name: Unpack Environment to Execute Build Script
        shell: bash
        run: |
          tar -xzf env-linux.tar.gz -C build_env
          ./build_env/bin/python build.py
      - name: Create Directory Structure for Release
        shell: bash
        run: |
          mkdir dist
          mkdir dist/python_modules
          mkdir dist/python_resources
          mkdir dist_standalone
          mkdir dist_standalone/python_modules
          mkdir dist_standalone/python_resources
          mv ./obi_deid_roberta_i2b2 ./dist_standalone/python_resources/obi_deid_roberta_i2b2
          mv ./PresidioDeidentificationForOHNLPTK.zip dist/python_modules/PresidioDeidentificationForOHNLPTK.zip
          mv ./PresidioDeidentificationForOHNLPTK-Standalone.zip dist_standalone/python_modules/PresidioDeidentificationForOHNLPTK.zip
      - name: Zip Package Dist for Final Release (Online/Compact)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r PresidioDeidentificationForOHNLPTK.zip ./dist
      - name: Zip Package Dist for Final Release (Standalone)
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r PresidioDeidentificationForOHNLPTK-Standalone.zip ./dist_standalone
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ github.ref }}
          # The name of the release. For example, `Release v1.0.1`
          release_name: Release ${{ github.ref }}
          # Text describing the contents of the tag.
          body: Release Autonomously Generated By CI on Pushed Tag
          # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
          draft: false # optional
          # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
          prerelease: false # optional
      - name: Upload Release Asset (Online/Compact)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./PresidioDeidentificationForOHNLPTK.zip
          asset_name: PresidioDeidentificationForOHNLPTK.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (Standalone)
        id: upload-release-asset-standalone
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./PresidioDeidentificationForOHNLPTK-Standalone.zip
          asset_name: PresidioDeidentificationForOHNLPTK-Standalone.zip
          asset_content_type: application/zip





